"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class SpheronApi {
    constructor(token, url) {
        this.token = token;
        this.spheronApiUrl = url !== null && url !== void 0 ? url : "https://api-v2.spheron.network";
    }
    getTokenScope() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, "/v1/api-keys/scope");
        });
    }
    getProject(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}`);
        });
    }
    getProjectDeployments(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const deployments = yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployments?skip=${options.skip}&limit=${options.limit}${options.status ? `&status=${options.status}` : ""}`);
            return { deployments };
        });
    }
    getProjectDomains(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/domains`);
        });
    }
    getProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/domains/${domainIdentifier}`);
        });
    }
    addProjectDomain(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.POST, `/v1/project/${projectId}/domains`, options);
        });
    }
    patchProjectDomain(projectId, domainIdentifier, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/domains/${domainIdentifier}`, options);
        });
    }
    verifyProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/domains/${domainIdentifier}/verify`, {});
        });
    }
    deleteProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/project/${projectId}/domains/${domainIdentifier}`);
        });
    }
    getCdnRecords() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/project/1/domains/cdn-records`);
            return Object.assign({}, response.records);
        });
    }
    getProjectDeploymentCount(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployments/count`);
        });
    }
    updateProjectState(projectId, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/state`, { state });
        });
    }
    updateProjectConfiguration(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PUT, `/v1/project/${projectId}/configuration`, options);
        });
    }
    createOrganization(username, name, appType) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                username,
                name,
                appType,
            };
            const { organization } = yield this.sendApiRequest(HttpMethods.POST, `/v1/organization`, body);
            return organization;
        });
    }
    getOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const organization = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}`);
            return organization;
        });
    }
    updateOrganization(organizationId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const organization = yield this.sendApiRequest(HttpMethods.PUT, `/v1/organization/${organizationId}`, options);
            return organization;
        });
    }
    getOrganizationProjects(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}/projects?skip=${options.skip}&limit=${options.limit}${options.state ? `&state=${options.state}` : ""}`);
            return result.projects;
        });
    }
    getOrganizationProjectCount(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}/projects/count${options.state ? `?state=${options.state}` : ""}`);
            return result.count;
        });
    }
    getProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/profile/`);
            return result.user;
        });
    }
    verfiyGitToken(provider, code, port) {
        return __awaiter(this, void 0, void 0, function* () {
            const verifiedToken = yield this.sendApiRequest(HttpMethods.GET, `/auth/${provider}/cli/verify-token/${code}?port=${port}`);
            return verifiedToken;
        });
    }
    getOrganizationUsage(organizationId, specialization) {
        return __awaiter(this, void 0, void 0, function* () {
            const { usage } = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${organizationId}/subscription-usage/specialization/${specialization}`);
            return usage;
        });
    }
    publishIPNS(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.POST, `/v1/ipns/deployments/${deploymentId}/names`);
            return this.mapIPNSResponseToIPNSName(resp.ipnsName);
        });
    }
    updateIPNSName(ipnsNameId, deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.PUT, `/v1/ipns/deployments/${deploymentId}/names/${ipnsNameId}`);
            return this.mapIPNSResponseToIPNSName(resp.ipnsName);
        });
    }
    getIPNSName(ipnsNameId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/names/${ipnsNameId}`);
            return this.mapIPNSResponseToIPNSName(resp);
        });
    }
    getIPNSNamesForUpload(uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/deployments/${uploadId}/names`);
            return resp.map((ipnsName) => this.mapIPNSResponseToIPNSName(ipnsName));
        });
    }
    getIPNSNamesForOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/names`, {
                organizationId,
            });
            return resp.map((ipnsName) => this.mapIPNSResponseToIPNSName(ipnsName));
        });
    }
    startDeployment(configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/deployment`, configuration);
            return response;
        });
    }
    authorizeDeployment(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/deployment/${deploymentId}/authorize`);
            return response;
        });
    }
    cancelDeployment(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/deployment/${deploymentId}/cancel`);
            return response;
        });
    }
    redeployDeployment(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/deployment/${deploymentId}/redeploy`);
            return response;
        });
    }
    getDeployment(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { deployment } = yield this.sendApiRequest(HttpMethods.GET, `/v1/deployment/${deploymentId}`);
            return deployment;
        });
    }
    suggestFramework(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/deployment/framework/suggestion`, null, {
                owner: options.owner,
                branch: options.branch,
                provider: options.provider,
                repo: options.repositoryName,
                root: options.root,
            });
            return response;
        });
    }
    addProjectEnvironmentVariables(projectId, environmentVariables) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/project/${projectId}/environment-variables`, {
                environmentVariables,
            });
            return response;
        });
    }
    updateProjectEnvironmentVariable(projectId, environmentVariableId, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.PUT, `/v1/project/${projectId}/environment-variables/${environmentVariableId}`, payload);
            return response.updated;
        });
    }
    deleteProjectEnvironmentVariable(projectId, environmentVariableId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/project/${projectId}/environment-variables/${environmentVariableId}`);
        });
    }
    getDeploymentEnvironments(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployment-environments`);
            return response.result;
        });
    }
    createDeploymentEnvironment(projectId, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/project/${projectId}/deployment-environments`, payload);
            return response.newEnvironment;
        });
    }
    updateDeploymentEnvironment(projectId, deploymentEnvironmentId, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.PUT, `/v1/project/${projectId}/deployment-environments/${deploymentEnvironmentId}`, payload);
            return response.deploymentEnvironment;
        });
    }
    deleteDeploymentEnvironment(projectId, deploymentEnvironmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.DELETE, `/v1/project/${projectId}/deployment-environments/${deploymentEnvironmentId}`);
            return response;
        });
    }
    activateDeploymentEnvironment(projectId, deploymentEnvironmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/deployment-environments/${deploymentEnvironmentId}/activate`);
            return response.deploymentEnvironment;
        });
    }
    deactivateDeploymentEnvironment(projectId, deploymentEnvironmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/deployment-environments/${deploymentEnvironmentId}/deactivate`);
            return response.deploymentEnvironment;
        });
    }
    getOrganizationClusters(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}/clusters?skip=${options.skip}&limit=${options.limit}`);
            return result.clusters;
        });
    }
    getCluster(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/cluster/${id}`);
        });
    }
    deleteCluster(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/cluster/${id}`);
        });
    }
    getClusterInstancesDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/cluster/${id}/instances/count`);
        });
    }
    getClusterFundsUsage(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/cluster/${id}/funds-usage`);
        });
    }
    getClusterInstances(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster/${id}/instances`, null, {
                skip: options.skip,
                limit: options.limit,
                topupReport: options.includeReport && "y",
            });
            return result.extendedInstances;
        });
    }
    getClusterTemplates() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-templates`);
            return response.clusterTemplates;
        });
    }
    getClusterTemplate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-templates/${id}`);
            return response.clusterTemplate;
        });
    }
    getClusterCategories() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-templates/categories`);
            return result.categories;
        });
    }
    getClusterInstance(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-instance/${id}`, null, {
                topupReport: options && options.includeReport && "y",
            });
            return response.instance;
        });
    }
    deleteClusterInstance(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/cluster-instance/${id}`);
        });
    }
    updateClusterInstance(id, organizationId, clusterInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.PATCH, `/v1/cluster-instance/${id}/update`, Object.assign(Object.assign({}, clusterInstance), { organizationId }));
        });
    }
    updateClusterInstanceHealthCheckInfo(id, healthCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.PATCH, `/v1/cluster-instance/${id}/update/health-check`, {
                healthCheckUrl: healthCheck.path,
                healthCheckPort: healthCheck.cointainerPort,
            });
        });
    }
    closeClusterInstance(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/${id}/close`);
        });
    }
    getClusterInstanceOrder(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/cluster-instance/order/${id}`);
        });
    }
    getClusterInstanceOrderLogs(id, logsOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (logsOptions.from < 0 || logsOptions.to < 0) {
                throw new Error(`From and To cannot be negative numbers.`);
            }
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-instance/order/${id}/logs`, null, logsOptions);
            return response.order;
        });
    }
    createClusterInstance(clusterInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/create`, clusterInstance);
        });
    }
    createClusterInstanceFromTemplate(clusterInstance) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/template`, clusterInstance);
        });
    }
    getClusterInstanceDomains(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/cluster-instance/${id}/domains`);
            return result.domains;
        });
    }
    addClusterInstanceDomain(instanceId, doamin) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/${instanceId}/domains`, doamin);
            return response.domain;
        });
    }
    updateClusterInstanceDomain(instanceId, domainId, doamin) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.PATCH, `/v1/cluster-instance/${instanceId}/domains/${domainId}`, doamin);
            return response.domain;
        });
    }
    deleteClusterInstanceDomain(instanceId, domainId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/cluster-instance/${instanceId}/domains/${domainId}`);
        });
    }
    verifyClusterInstanceDomain(instanceId, domainId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.PATCH, `/v1/cluster-instance/${instanceId}/domains/${domainId}/verify`);
        });
    }
    getComputeMachines(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.limit < 0 || options.skip < 0) {
                throw new Error(`Limit and Skip cannot be negative numbers.`);
            }
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/compute-machine-image`, null, options);
            return result.akashMachineImages;
        });
    }
    getComputeMachineRegions() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/compute-machine-image/regions`);
            return result.regions;
        });
    }
    triggerClusterInstanceHealthCheck(instanceId, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/${instanceId}/trigger/container-health-check?topicId=${topicId}`);
        });
    }
    triggerClusterInstanceStatusCheck(instanceId, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/${instanceId}/trigger/container-health-check?topicId=${topicId}`);
        });
    }
    triggerClusterInstanceLogFetch(instanceId, topicId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.POST, `/v1/cluster-instance/${instanceId}/trigger/fetch-logs?topicId=${topicId}`);
        });
    }
    getPriceForToken(tokenId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/price/liveTokenPrice/${tokenId}`);
            return response.price;
        });
    }
    getGPTResponse(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.POST, "/v1/gpt/query", body);
            return response;
        });
    }
    isWhitelisted() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, "/v1/gpt/whitelisted");
            return response;
        });
    }
    getOrganizationBuckets({ organizationId, name, state, skip, limit, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!organizationId) {
                throw new Error("Organization Id is not provided.");
            }
            if (skip < 0 || limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${organizationId}/buckets`, null, {
                name: name !== null && name !== void 0 ? name : "",
                state: state !== null && state !== void 0 ? state : "",
                skip,
                limit,
            });
        });
    }
    getOrganizationBucketCount({ organizationId, name, state, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!organizationId) {
                throw new Error("Organization Id is not provided.");
            }
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${organizationId}/buckets/count`, null, {
                name: name !== null && name !== void 0 ? name : "",
                state: state !== null && state !== void 0 ? state : "",
            });
        });
    }
    getBucket(bucketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}`);
        });
    }
    updateBucketState(bucketId, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/bucket/${bucketId}/state`, { state });
        });
    }
    getBucketDomains(bucketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/domains`);
        });
    }
    getBucketDomain(bucketId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/domains/${domainIdentifier}`);
        });
    }
    addBucketDomain(bucketId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.POST, `/v1/bucket/${bucketId}/domains`, options);
        });
    }
    patchBucketDomain(bucketId, domainIdentifier, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/bucket/${bucketId}/domains/${domainIdentifier}`, options);
        });
    }
    verifyBucketDomain(bucketId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/bucket/${bucketId}/domains/${domainIdentifier}/verify`, {});
        });
    }
    deleteBucketDomain(bucketId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/bucket/${bucketId}/domains/${domainIdentifier}`);
        });
    }
    getBucketIpnsRecords(bucketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/ipns-records`);
        });
    }
    getBucketIpnsRecord(bucketId, ipnsRecordId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/ipns-records/${ipnsRecordId}`);
        });
    }
    addBucketIpnsRecord(bucketId, uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.POST, `/v1/bucket/${bucketId}/ipns-records`, {
                uploadId,
            });
        });
    }
    patchBucketIpnsRecord(bucketId, ipnsRecordId, uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/bucket/${bucketId}/ipns-records/${ipnsRecordId}`, {
                uploadId,
            });
        });
    }
    deleteBucketIpnsRecord(bucketId, ipnsRecordId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/bucket/${bucketId}/ipns-records/${ipnsRecordId}`);
        });
    }
    getBucketUploads(bucketId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const uploads = yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/uploads?skip=${options.skip}&limit=${options.limit}`);
            return { uploads };
        });
    }
    getBucketUploadCount(bucketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/bucket/${bucketId}/uploads/count`);
        });
    }
    migrateStaticSiteOrgToStorage(webappOrganizationId, storageOrganizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.POST, `/v1/organization/${storageOrganizationId}/migrate-projects`, {
                webappOrganizationId,
            });
        });
    }
    getUpload(uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { upload } = yield this.sendApiRequest(HttpMethods.GET, `/v1/upload/${uploadId}`);
            return upload;
        });
    }
    pinUpload(uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { upload } = yield this.sendApiRequest(HttpMethods.PATCH, `/v1/upload/${uploadId}/pin`);
            return upload;
        });
    }
    unpinUpload(uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { upload } = yield this.sendApiRequest(HttpMethods.PATCH, `/v1/upload/${uploadId}/unpin`);
            return upload;
        });
    }
    sendApiRequest(method, path, payload, params) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield (0, axios_1.default)({
                    method,
                    url: `${this.spheronApiUrl}${path}`,
                    data: payload,
                    headers: {
                        Authorization: `Bearer ${this.token}`,
                    },
                    params: params,
                });
                return response.data;
            }
            catch (error) {
                throw new Error(((_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) || (error === null || error === void 0 ? void 0 : error.message));
            }
        });
    }
    mapIPNSResponseToIPNSName(ipnsResponse) {
        return {
            id: ipnsResponse._id,
            publishedUploadId: ipnsResponse.publishedDeploymentId,
            organizationId: ipnsResponse.organizationId,
            createdAt: ipnsResponse.createdAt,
            updatedAt: ipnsResponse.updatedAt,
            ipnsHash: ipnsResponse.keyId,
            ipnsLink: ipnsResponse.ipnsLink,
        };
    }
}
var HttpMethods;
(function (HttpMethods) {
    HttpMethods["GET"] = "Get";
    HttpMethods["POST"] = "Post";
    HttpMethods["PATCH"] = "Patch";
    HttpMethods["DELETE"] = "Delete";
    HttpMethods["PUT"] = "Put";
})(HttpMethods || (HttpMethods = {}));
exports.default = SpheronApi;

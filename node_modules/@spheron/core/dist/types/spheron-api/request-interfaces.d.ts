import { ClusterProtocolEnum } from "./enums";
import { Env, PersistentStorage, Port } from "./interfaces";
interface CreateInstanceRequest {
    organizationId: string;
    uniqueTopicId?: string;
    configuration: {
        branch?: string;
        folderName: string;
        protocol: ClusterProtocolEnum;
        image: string;
        tag: string;
        instanceCount: number;
        buildImage: boolean;
        ports: Array<Port>;
        env: Array<Env>;
        command: Array<string>;
        args: Array<string>;
        region: string;
        akashMachineImageName?: string;
        customInstanceSpecs: CustomInstanceSpecs;
    };
    instanceName?: string;
    clusterUrl: string;
    clusterProvider: string;
    clusterName: string;
    healthCheckUrl?: string;
    healthCheckPort?: number;
    scalable?: boolean;
}
interface CreateInstanceFromMarketplaceRequest {
    templateId: string;
    environmentVariables: MarketplaceDeploymentVariable[];
    organizationId: string;
    akashImageId: string;
    uniqueTopicId?: string;
    region: string;
    customInstanceSpecs?: CustomInstanceSpecs;
    scalable: boolean;
    instanceCount?: number;
}
interface MarketplaceDeploymentVariable {
    label: string;
    value: string;
}
interface UpdateInstaceRequest {
    env: Array<Env>;
    command: Array<string>;
    args: Array<string>;
    uniqueTopicId: string;
    tag: string;
    akashMachineImageName?: string;
    customInstanceSpecs?: CustomInstanceSpecs;
    instanceCount?: number;
}
interface CustomInstanceSpecs {
    cpu?: number;
    memory?: string;
    persistentStorage?: PersistentStorage;
    storage: string;
}
export { CreateInstanceRequest, CreateInstanceFromMarketplaceRequest, MarketplaceDeploymentVariable, UpdateInstaceRequest, };

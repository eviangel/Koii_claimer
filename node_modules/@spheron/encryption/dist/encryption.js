"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptData = exports.encryptData = void 0;
const crypto_1 = require("./crypto");
const encryptData = (data) => __awaiter(void 0, void 0, void 0, function* () {
    const symmKey = yield (0, crypto_1.generateSymmetricKey)();
    const encryptedData = yield (0, crypto_1.encryptWithSymmetricKey)(symmKey, data);
    const exportedSymmKey = new Uint8Array(yield crypto.subtle.exportKey("raw", symmKey));
    return {
        symmetricKey: exportedSymmKey,
        encryptedData: encryptedData,
    };
});
exports.encryptData = encryptData;
const decryptData = (encryptedData, symmKey) => __awaiter(void 0, void 0, void 0, function* () {
    const importedSymmKey = yield (0, crypto_1.importSymmetricKey)(symmKey);
    const decryptedData = yield (0, crypto_1.decryptWithSymmetricKey)(encryptedData, importedSymmKey);
    return decryptedData;
});
exports.decryptData = decryptData;

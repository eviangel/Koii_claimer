"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptWithSymmetricKey = exports.generateSymmetricKey = exports.decryptWithSymmetricKey = exports.importSymmetricKey = exports.SYMM_KEY_ALGO_PARAMS = void 0;
exports.SYMM_KEY_ALGO_PARAMS = {
    name: "AES-CBC",
    length: 256,
};
const importSymmetricKey = (symmKey) => __awaiter(void 0, void 0, void 0, function* () {
    const importedSymmKey = yield crypto.subtle.importKey("raw", symmKey, exports.SYMM_KEY_ALGO_PARAMS, true, ["encrypt", "decrypt"]);
    return importedSymmKey;
});
exports.importSymmetricKey = importSymmetricKey;
const decryptWithSymmetricKey = (encryptedData, symmKey) => __awaiter(void 0, void 0, void 0, function* () {
    const recoveredIv = yield encryptedData.slice(0, 16);
    const encryptedZipArrayBuffer = yield encryptedData.slice(16);
    const decryptedZip = yield crypto.subtle.decrypt({
        name: "AES-CBC",
        iv: recoveredIv,
    }, symmKey, encryptedZipArrayBuffer);
    return decryptedZip;
});
exports.decryptWithSymmetricKey = decryptWithSymmetricKey;
const generateSymmetricKey = () => __awaiter(void 0, void 0, void 0, function* () {
    const symmKey = yield crypto.subtle.generateKey(exports.SYMM_KEY_ALGO_PARAMS, true, [
        "encrypt",
        "decrypt",
    ]);
    return symmKey;
});
exports.generateSymmetricKey = generateSymmetricKey;
const encryptWithSymmetricKey = (symmKey, data) => __awaiter(void 0, void 0, void 0, function* () {
    const iv = crypto.getRandomValues(new Uint8Array(16));
    const encryptedZipData = yield crypto.subtle.encrypt({
        name: "AES-CBC",
        iv,
    }, symmKey, data);
    return new Uint8Array([...iv, ...new Uint8Array(encryptedZipData)]);
});
exports.encryptWithSymmetricKey = encryptWithSymmetricKey;
